{"version":3,"sources":["largeData.js","Componants/CurrencyForm/CurrencyForm.js","Componants/CurrencyDisplay/CurrencyDisplay.js","Componants/App/App.js","serviceWorker.js","index.js"],"names":["curCodes","CurrencyForm","setSubmission","useState","countries","setCountries","destination","setDestination","amount","setAmount","baseCurrency","setBaseCurrency","toCurrency","setToCurrency","fetchCountries","a","fetch","res","json","data","map","item","name","currencies","code","alpha3Code","console","log","handleSubmit","e","preventDefault","toCur","baseCur","useEffect","className","htmlFor","value","onChange","target","placeholder","type","list","id","country","i","key","cur","includes","defaultValue","disabled","find","createToCurOptions","onClick","CurrencyDisplay","setSubmitted","conversion","setConversion","fetchConversion","url","process","response","App","submited","submission","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0b865175.chunk.js","sourcesContent":["export const curCodes = [\n  \"AED\",\n  \"AFN\",\n  \"ALL\",\n  \"AMD\",\n  \"ANG\",\n  \"AOA\",\n  \"ARS\",\n  \"AUD\",\n  \"AWG\",\n  \"AZN\",\n  \"BAM\",\n  \"BBD\",\n  \"BDT\",\n  \"BGN\",\n  \"BHD\",\n  \"BIF\",\n  \"BMD\",\n  \"BND\",\n  \"BOB\",\n  \"BRL\",\n  \"BSD\",\n  \"BTC\",\n  \"BTN\",\n  \"BWP\",\n  \"BYN\",\n  \"BZD\",\n  \"CAD\",\n  \"CDF\",\n  \"CHF\",\n  \"CLF\",\n  \"CLP\",\n  \"CNH\",\n  \"CNY\",\n  \"COP\",\n  \"CRC\",\n  \"CUC\",\n  \"CUP\",\n  \"CVE\",\n  \"CZK\",\n  \"DJF\",\n  \"DKK\",\n  \"DOP\",\n  \"DZD\",\n  \"EGP\",\n  \"ERN\",\n  \"ETB\",\n  \"EUR\",\n  \"FJD\",\n  \"FKP\",\n  \"GBP\",\n  \"GEL\",\n  \"GGP\",\n  \"GHS\",\n  \"GIP\",\n  \"GMD\",\n  \"GNF\",\n  \"GTQ\",\n  \"GYD\",\n  \"HKD\",\n  \"HNL\",\n  \"HRK\",\n  \"HTG\",\n  \"HUF\",\n  \"IDR\",\n  \"ILS\",\n  \"IMP\",\n  \"INR\",\n  \"IQD\",\n  \"IRR\",\n  \"ISK\",\n  \"JEP\",\n  \"JMD\",\n  \"JOD\",\n  \"JPY\",\n  \"KES\",\n  \"KGS\",\n  \"KHR\",\n  \"KMF\",\n  \"KPW\",\n  \"KRW\",\n  \"KWD\",\n  \"KYD\",\n  \"KZT\",\n  \"LAK\",\n  \"LBP\",\n  \"LKR\",\n  \"LRD\",\n  \"LSL\",\n  \"LYD\",\n  \"MAD\",\n  \"MDL\",\n  \"MGA\",\n  \"MKD\",\n  \"MMK\",\n  \"MNT\",\n  \"MOP\",\n  \"MRO\",\n  \"MRU\",\n  \"MUR\",\n  \"MVR\",\n  \"MWK\",\n  \"MXN\",\n  \"MYR\",\n  \"MZN\",\n  \"NAD\",\n  \"NGN\",\n  \"NIO\",\n  \"NOK\",\n  \"NPR\",\n  \"NZD\",\n  \"OMR\",\n  \"PAB\",\n  \"PEN\",\n  \"PGK\",\n  \"PHP\",\n  \"PKR\",\n  \"PLN\",\n  \"PYG\",\n  \"QAR\",\n  \"RON\",\n  \"RSD\",\n  \"RUB\",\n  \"RWF\",\n  \"SAR\",\n  \"SBD\",\n  \"SCR\",\n  \"SDG\",\n  \"SEK\",\n  \"SGD\",\n  \"SHP\",\n  \"SLL\",\n  \"SOS\",\n  \"SRD\",\n  \"SSP\",\n  \"STD\",\n  \"STN\",\n  \"SVC\",\n  \"SYP\",\n  \"SZL\",\n  \"THB\",\n  \"TJS\",\n  \"TMT\",\n  \"TND\",\n  \"TOP\",\n  \"TRY\",\n  \"TTD\",\n  \"TWD\",\n  \"TZS\",\n  \"UAH\",\n  \"UGX\",\n  \"USD\",\n  \"UYU\",\n  \"UZS\",\n  \"VEF\",\n  \"VES\",\n  \"VND\",\n  \"VUV\",\n  \"WST\",\n  \"XAF\",\n  \"XAG\",\n  \"XAU\",\n  \"XCD\",\n  \"XDR\",\n  \"XOF\",\n  \"XPD\",\n  \"XPF\",\n  \"XPT\",\n  \"YER\",\n  \"ZAR\",\n  \"ZMW\",\n  \"ZWL\"\n]\n","import React, {useEffect, useState} from 'react';\n\nimport './CurrencyForm.css';\nimport { curCodes } from './../../largeData.js'\n\nfunction CurrencyForm({ setSubmission }) {\n  const [countries, setCountries] = useState([])\n  const [destination, setDestination] = useState('')\n  const [amount, setAmount] = useState('')\n  const [baseCurrency, setBaseCurrency] = useState('')\n  const [toCurrency, setToCurrency] = useState('')\n\n  const fetchCountries = async () => {\n    try {\n      const res = await fetch('https://restcountries.eu/rest/v2/all')\n      const data = await res.json()\n      let countries = await data.map(item => {\n        let formated = {\n          name: item.name,\n          currencies: item.currencies,\n          code: item.alpha3Code\n        }\n        return formated\n      })\n      setCountries(countries)\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  const resetState = () => {\n    setCountries([])\n    setDestination('')\n    setAmount('')\n    setBaseCurrency('')\n    setToCurrency('')\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault()\n\n    if (toCurrency && baseCurrency && amount) {\n      setSubmission({\n        toCur: toCurrency,\n        baseCur: baseCurrency,\n        amount\n      })\n      resetState()\n    }\n  }\n\n  const validDestionation = () => {\n    const destinations = countries.map(country => country.name)\n    return destinations.includes(destination)\n  }\n\n  const createDestinationOptions = () => {\n    return countries.map((country, i) => <option key={`country${i}`} value={country.name}/>)\n  }\n\n  const createBaseCurOptions = () => {\n    return curCodes.map((cur, i) => <option key={`base${i}`} value={cur}/>)\n  }\n  const createToCurOptions = () => {\n    if (destination) {\n      const { currencies } = countries.find(country => country.name === destination)\n      return currencies.map((cur, i) => {\n        return <option key={`cur${i}`} value={cur.code}>{cur.code}</option>\n      })\n    }\n  }\n\n  useEffect(() => {\n    fetchCountries()\n  },[])\n\n  useEffect(() => {\n\n  },[destination])\n\n  // useEffect(() => {\n  //   console.log(countries);\n  // },[countries])\n\n  return (\n    <form className=\"CurrencyForm\">\n      <label htmlFor=\"countries-input\">Destination:</label>\n      <input value={destination} onChange={(e) => setDestination(e.target.value)} placeholder='Destination' type='text' list=\"countries\" name=\"countries\" id=\"countries-input\"/>\n      <datalist id=\"countries\">\n        {createDestinationOptions()}\n      </datalist>\n      <label htmlFor=\"amount-input\">Amount:</label>\n      <input placeholder='0' value={amount} onChange={(e) => setAmount(e.target.value)} type=\"number\" id=\"amount-input\" name=\"Amount\"/>\n      <label htmlFor=\"currencies-input\">From:</label>\n      <input value={baseCurrency} onChange={(e) => setBaseCurrency(e.target.value)} placeholder='From' type='text' list=\"currencies\" name=\"currencies\" id=\"currencies-input\"/>\n      <datalist id=\"currencies\">\n        {createBaseCurOptions()}\n      </datalist>\n      <label htmlFor=\"exchangeCur\">To:</label>\n      {validDestionation() ?\n        <select defaultValue='' value={toCurrency} onChange={e => setToCurrency(e.target.value)} name=\"exchangeCur\" id=\"exchangeCur\">\n          <option disabled value=''>Select Currency</option>\n          {createToCurOptions()}\n        </select> :\n        <select value='' disabled={true} name=\"exchangeCur\" id=\"exchangeCur\">\n          <option value=''>Select Currency</option>\n        </select>\n      }\n      <button type='button' onClick={e => handleSubmit(e)} name='submit'>Convert!</button>\n    </form>\n  );\n}\n\nexport default CurrencyForm;\n","import React, { useEffect, useState } from 'react';\nimport './CurrencyDisplay.css';\n\nfunction CurrencyDisplay({ baseCur, toCur, amount, setSubmitted }) {\nconst [conversion, setConversion] = useState()\n  const fetchConversion = async () => {\n    if (baseCur && toCur && amount) {\n      const url = `https://openexchangerates.org/api/convert/${amount}/${baseCur}/${toCur}?app_id=${process.env.REACT_APP_CURRENCY_API_KEY}`\n      try {\n        const res = await fetch(url)\n        const data = await res.json()\n\n        setConversion(await data.response)\n      } catch (e) {\n\n      } finally {\n\n      }\n    }\n  }\n\n  const handleClick = () => {\n    setSubmitted(false)\n  }\n\n  useEffect(() => {\n    fetchConversion()\n  },[])\n\n  return (\n    <section className=\"CurrencyDisplay\">\n      <button type='button' onClick={handleClick} name='submit'>X</button>\n      <h3>Your:{amount} {baseCur}</h3>\n      <h3>Is Worth {conversion} of {toCur} </h3>\n    </section>\n  );\n}\n\nexport default CurrencyDisplay;\n","import React, { useState, useEffect } from 'react';\nimport CurrencyForm from './../CurrencyForm/CurrencyForm.js'\nimport CurrencyDisplay from './../CurrencyDisplay/CurrencyDisplay.js'\nimport './App.css';\n\nfunction App() {\n  const [submited, setSubmitted] = useState(false)\n  const [submission, setSubmission] = useState({})\n\n  const submit = (submission) => {\n    setSubmitted(true)\n    setSubmission(submission)\n  }\n\n  return (\n    <section className=\"App\">\n      <header className=\"App-header\">\n        <h1>Trip Currency Plan</h1>\n      </header>\n      <CurrencyForm setSubmission={submit} />\n      {submited && <CurrencyDisplay {...submission} setSubmitted={setSubmitted} />}\n    </section>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Componants/App/App.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}